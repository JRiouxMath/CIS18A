// Do not implement any of the logic for the class until we have written at 
// least two tests per method!!!

public class Fractions {
// private member attributes (also known as properties)
    int numerator;
    int denominator;
    
    public Fractions()
    {
        numerator = 0;
        denominator = 1;
    }
    
    public Fractions(int n, int d)
    {
        this.setNumerator(n);
        this.setDenominator(d);
        int factor = gcd (n,d);
        numerator /= factor;
        denominator /= factor;
    }
    
    public Fractions add(Fractions f2)
    {
        int a = this.numerator, b = this.denominator;
        int c = f2.numerator, d = f2.denominator;
        
        return new Fractions(a*d+b*c, b*d);
    }//end method add
    
    public Fractions subtract(Fractions f2)
    {
        int a = this.numerator, b = this.denominator;
        int c = f2.numerator, d = f2.denominator;
        
        return new Fractions(a*d-b*c, b*d);
    }// end method subtract
    
    public Fractions multiply(Fractions f2)
    {
        int a = this.numerator, b = this.denominator;
        int c = f2.numerator, d = f2.denominator;
        
        return new Fractions(a*c, b*d);
    }// end method multiply
    
    public Fractions divide(Fractions f2)
    {
        int a = this.numerator, b = this.denominator;
        int c = f2.numerator, d = f2.denominator;
        
        return new Fractions(a*d, b*c);
    }// end method divide
    
    public int getNumerator() {
        return numerator;
    }

    public void setNumerator(int numerator) {
        this.numerator = numerator;
    }

    public int getDenominator() {
        return denominator;
    }

    public void setDenominator(int denominator) {
        if(denominator != 0)
            this.denominator = denominator;
        else throw new IllegalArgumentException("Uh oh, you can't divide by zero!");
    }
    
    public double getValue()
    {
        return (double)numerator/ (double)denominator;
    }   
    
    public boolean equals(Fractions F2)
    {
        return(this.numerator == F2.numerator) && (this.denominator == F2.denominator);
    }
    
    @Override
    public String toString()
    {
        throw new UnsupportedOperationException("toString() not yet implemented");
    }
    
    // gcd is a private utility method only for use by the Fractions class
    protected int gcd(int a, int b)
    {
        if (a==0) return b;
        return gcd( b%a, a);
    }    
}
