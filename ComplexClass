/*
 * Jeanine Rioux
 * CSC 18 A   10/25/17
 * Classwork codealong creating a class
 */

public class Complex {
    private double real;
    private double imaginary;

    
    /******************************************************
     * Constructors
     ******************************************************/
    // Parameter-less constructor, default is zero
    public Complex()
    {
        real = 0.0;
        imaginary = 0.0;
    }// end zero-arg constructor
    
    // Two parameter constructor
    public Complex(double real, double imaginary)
    {
        this.real = real;
        this.imaginary = imaginary;
    }// end two-arg constructor
    
    // Constructor to duplicate preexisting object
    public Complex(Complex original)
    {
        real = original.real;
        imaginary = original.imaginary;
    }// end copy constructor
    
   
    /****************************************************
     * Getters and Setters
     *****************************************************/
    
    /**
     * @return the real
     */
    public double getReal() {
        return real;
    }

    /**
     * @param real the real to set
     */
    public void setReal(double real) {
        this.real = real;
    }

    /**
     * @return the imaginary
     */
    public double getImaginary() {
        return imaginary;
    }

    /**
     * @param imaginary the imaginary to set
     */
    public void setImaginary(double imaginary) {
        this.imaginary = imaginary;
    }
    
     /****************************************************
     * Computational methods
     * **************************************************/
    
    public Complex add(Complex b)
    {
        /*Complex temp = new Complex();
        temp.setReal(real + b.real);
        temp.setImaginary(imaginary + b.imaginary);
        
        return temp;*/
        
        return new Complex (real + b.real, imaginary + b.imaginary);// anonymous object
    }// end method add
    
    public Complex subtract(Complex b)
    {
             
        return new Complex (real - b.real, imaginary - b.imaginary);// anonymous object
    }// end method subtract
    
    public Complex multiply (Complex b)
    {
        return new Complex ( real* b.real - imaginary* b.imaginary,
                            real * b.imaginary + imaginary * b.real);
    }// end method multiply
    
    public Complex divide (Complex b)
    {
        Complex conj = new Complex(b);
        conj.imaginary *= -1.0;
        
        Complex temp = this.multiply(conj);
        double denom = b.real * b.real + b.imaginary * b.imaginary;
        return new Complex(temp.getReal() / denom, temp.getImaginary() / denom);
        
    }// end method divide
    
    
    /*********************************************************
     * toString method
     ********************************************************/    
    @Override
    public String toString()
    {
        if (imaginary >= 0)
            return real + " + " + imaginary +"i";
        else
            return real + "" + imaginary +"i"; //empty string forces string concat rather than algebra add
    } // end method toString
    
    
}
